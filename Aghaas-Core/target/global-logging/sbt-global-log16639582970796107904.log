[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Processing"})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/main/scala/Datapath/Config.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport chisel3._\nimport chisel3.util._\n\ntrait Config {\n\n// Reg File\n\n    val REGFILE_LEN = 32\n    val XLEN = 32\n    val address = UInt(5.W)\n    val data = SInt(32.W)\n\n\n    val WLEN = 32\n    val ALUOP_SIG_LEN = 4\n    val INST_MEM_LEN = 32\n    val func3 = UInt(3.W)\n\n// Instr Mem\n\n    val datatype = UInt\n    val AWLEN = 10\n    val nRows = math.pow(2,AWLEN).toInt\n    val initFile = \"src/main/scala/Datapath/instrFile.txt\"\n\n// Type Decode\n\n    val opCodeWidth = UInt(7.W)\n\n//  Alu\n\n    val in_out_Width = 32\n    val AluCtrl = 5\n\n//  Imm Gen\n\n    val immOutType = SInt(32.W)\n    val immInType = UInt(32.W)\n\n//  Jalr\n\n    val jalType = SInt(32.W)\n\n// Alu Control\n\n    val aluopWidth = 3\n\n//  Data Memory\n\n    val addrType = UInt(32.W)\n    val dataType = SInt(32.W)\n    val memWidth = 32\n    val rows = 1024\n\n//  PC\n\n    val pcInType = SInt(32.W)\n\n\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/test/scala/Datapath/AluControlTest.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport org.scalatest._\nimport chiseltest._\nimport chisel3._\n\nclass AluControlTest extends FreeSpec with ChiselScalatestTester {\n    \n    \"ALU Control Test\" in {\n    \n        test(new AluControl) { c =>\n\n        c.io.Aluop.poke(\"b001\".U)\n        c.io.func7.poke(false.B)\n        c.io.func3.poke(\"b101\".U)\n\n        c.clock.step(1)\n\n        c.io.control.expect(\"b00101\".U)\n\n        }   \n    }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/test/scala/Datapath/TopFIleTest.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport org.scalatest._\nimport chiseltest._\nimport chisel3._\n\nclass TopFileTest extends FreeSpec with ChiselScalatestTester {\n    \n    \"Top File Test\" in {\n    \n        test(new TopFile) { c =>\n\n        c.clock.step(800)\n\n        // c.io.data_out.expect(0.U)\n   \n        }\n    }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/test/scala/Datapath/InstructionMemoryTest.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport chisel3._ \nimport org.scalatest._ \nimport chiseltest._ \n\nclass InstructionMemoryTest extends FreeSpec with ChiselScalatestTester{\n\n  \"InstructionMemory test\" in {\n\n    test(new InstructionMemory){ c =>\n\n    c.io.addr.poke(4.U)\n    // c.io.output1.expect(6.U)\n    // c.io.inst.expect(4.U)\n    c.clock.step(100)\n    \n    }\n  }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/test/scala/Datapath/AluTest.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport org.scalatest._\nimport chiseltest._\nimport chisel3._\n\nclass AluTest extends FreeSpec with ChiselScalatestTester{\n    \n    \"ALU Test\" in {\n\n        test(new Alu){ c=>\n        \n        c.io.in1.poke(1.S)\n        c.io.in2.poke(3.S)\n        c.io.AluControl.poke(\"b00000\".U)\n        c.io.Branch.expect(false.B)\n        c.io.out.expect(4.S)\n\n        }\n    }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/test/scala/Datapath/JalrTest.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport org.scalatest._\nimport chiseltest._\nimport chisel3._\n\nclass JalrTest extends FreeSpec with ChiselScalatestTester {\n\n    \"Jalr Test\" in {\n\n        test(new Jalr){c =>\n\n        c.io.rs1.poke(2.S)\n        c.io.Type.poke(2.S)\n        c.clock.step(1)\n        c.io.out.expect(4.S)\n\n        }\n    }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/test/scala/Datapath/ProgramCounterTest.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport org.scalatest._\nimport chiseltest._\nimport chisel3._\n\nclass PCTest extends FreeSpec with ChiselScalatestTester {\n    \n    \"Program Counter Test\" in {\n    \n        test(new PC) { c =>\n\n        c.io.in.poke(8.U)\n\n        c.clock.step(1)\n\n        c.io.pc.expect(8.U)\n        c.io.pcPlus4.expect(12.U)\n\n\n        }   \n    }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/test/scala/Datapath/RegisterFileTest.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport chisel3._\nimport org.scalatest._\nimport chiseltest._\n\nclass RegFileTest extends FreeSpec with ChiselScalatestTester {\n \n    \"Register File Test\" in {\n\n        test(new RegFile) { c =>\n\n        c.io.regEn.poke(1.B)\n        c.io.waddr.poke(3.U)\n        c.io.wdata.poke(55.S)\n\n        c.clock.step(1)\n        c.io.regEn.poke(0.B)\n        c.io.raddr1.poke(3.U)\n\n        c.io.rdata1.expect(55.S)\n\n        c.clock.step(100)\n        \n    }\n  }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/main/scala/Datapath/InstructionMemory.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport chisel3._ \nimport chisel3.util._\nimport chisel3.util.experimental.loadMemoryFromFile\n\nclass InstMemIO(DW:Int, AW:Int) extends Bundle{\n    val addr = Input(UInt(AW.W))\n    val inst = Output(UInt(DW.W))\n}\n\nclass InstructionMemory extends Module with Config{\n\n    val io = IO(new InstMemIO(WLEN,AWLEN))\n    val imem = Mem(nRows,UInt(WLEN.W))\n    io.inst := imem(io.addr)\n    loadMemoryFromFile(imem, initFile)\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/main/scala/Datapath/ProgramCounter.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport chisel3._\n \nclass PC_IO(width: Int) extends Bundle{\n\n    val in = Input(UInt(width.W))\n    val pc = Output(UInt(width.W))\n    val pcPlus4 = Output(UInt(width.W))\n\n}\n\nclass PC extends Module with Config {\n\n    val io = IO(new PC_IO(WLEN))\n\n    val reg = RegInit(0.U(WLEN.W))\n    reg := io.in\n    io.pc := reg\n    io.pcPlus4 := reg + 4.U\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/main/scala/Datapath/Jalr.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport chisel3._\nimport chisel3.util._\n\nclass Jalr_IO(width: SInt) extends Bundle{\n\n    val rs1 = Input(width)\n\tval Type = Input(width)\n    val out = Output(width)\n}\n\nclass Jalr extends Module with Config{\n\n\tval io = IO(new Jalr_IO(jalType))\n\t\n    io.out :=  (io.rs1 + io.Type) & 4294967294L.S\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/project/plugins.sbt","languageId":"scala","version":1,"text":"logLevel := Level.Warn\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/build.sbt","languageId":"scala","version":1,"text":"// See README.md for license details.\n\nThisBuild / scalaVersion     := \"2.12.13\"\nThisBuild / version          := \"0.1.0\"\nThisBuild / organization     := \"com.github.merledu\"\n\nlazy val root = (project in file(\".\"))\n  .settings(\n    name := \"Aghaas-Core\",\n    libraryDependencies ++= Seq(\n      \"edu.berkeley.cs\" %% \"chisel3\" % \"3.4.3\",\n      \"edu.berkeley.cs\" %% \"chiseltest\" % \"0.3.3\" % \"test\"\n    ),\n    scalacOptions ++= Seq(\n      \"-Xsource:2.11\",\n      \"-language:reflectiveCalls\",\n      \"-deprecation\",\n      \"-feature\",\n      \"-Xcheckinit\",\n      // Enables autoclonetype2 in 3.4.x (on by default in 3.5)\n      \"-P:chiselplugin:useBundlePlugin\"\n    ),\n    addCompilerPlugin(\"edu.berkeley.cs\" % \"chisel3-plugin\" % \"3.4.3\" cross CrossVersion.full),\n    addCompilerPlugin(\"org.scalamacros\" % \"paradise\" % \"2.1.1\" cross CrossVersion.full)\n  )\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/build.sc","languageId":"scala","version":1,"text":"// import Mill dependency\nimport mill._\nimport mill.define.Sources\nimport mill.modules.Util\nimport mill.scalalib.TestModule.ScalaTest\nimport scalalib._\n// support BSP\nimport mill.bsp._\n\nobject Aghaas-Core extends SbtModule { m =>\n  override def millSourcePath = os.pwd\n  override def scalaVersion = \"2.12.13\"\n  override def scalacOptions = Seq(\n    \"-Xsource:2.11\",\n    \"-language:reflectiveCalls\",\n    \"-deprecation\",\n    \"-feature\",\n    \"-Xcheckinit\",\n    // Enables autoclonetype2 in 3.4.x (on by default in 3.5)\n    \"-P:chiselplugin:useBundlePlugin\"\n  )\n  override def ivyDeps = Agg(\n    ivy\"edu.berkeley.cs::chisel3:3.4.3\",\n  )\n  override def scalacPluginIvyDeps = Agg(\n    ivy\"edu.berkeley.cs:::chisel3-plugin:3.4.3\",\n    ivy\"org.scalamacros:::paradise:2.1.1\"\n  )\n  object test extends Tests with ScalaTest {\n    override def ivyDeps = m.ivyDeps() ++ Agg(\n      ivy\"edu.berkeley.cs::chiseltest:0.3.3\"\n    )\n  }\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/test/scala/Datapath/TypeDecodeTest.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport org.scalatest._\nimport chiseltest._\nimport chisel3._\n\nclass TypeDecodeTest extends FreeSpec with ChiselScalatestTester {\n    \n    \"Type Decode Test\" in {\n    \n        test(new TypeDecode) { c =>\n\n        c.io.opCode.poke(35.U)\n\n        c.clock.step(1)\n\n        c.io.Store.expect(1.B)\n\n        }   \n    }\n}\n\n// package Datapath\n\n// import org.scalatest._\n// import chiseltest._\n// import chisel3._\n\n// class TypeDecodeTest extends FreeSpec with ChiselScalatestTester {\n    \n//     \"Type Decode Test\" in {\n    \n//         test(new TypeDecode(7)) { c =>\n\n//         c.io.opcode.poke(35.U)\n\n//         c.clock.step(1)\n\n//         c.io.store.expect(1.B)\n\n//         }   \n//     }\n// }\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/test/scala/Datapath/DataMemoryTest.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport org.scalatest._\nimport chiseltest._\nimport chisel3._\n\nclass DataMemTest extends FreeSpec with ChiselScalatestTester {\n    \n    \"Data Memory Test\" in {\n    \n        test(new DataMem) { c =>\n\n        c.io.wr_en.poke(1.B)\n        // c.io.waddr.poke(3.U)\n        \n        c.io.addr.poke(3.U)\n\n        c.io.data_in.poke(55.S)\n\n        c.clock.step(1)\n        c.io.wr_en.poke(0.B)\n        c.io.rd_en.poke(1.B)\n\n        c.io.data_out.expect(55.S)\n\n        c.clock.step(100)\n   \n        }\n    }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/test/scala/Datapath/BranchControlTest.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport chisel3 . _\nimport chisel3 . util._\nimport org.scalatest._\nimport chiseltest._\nimport scala . util . Random\n\nclass BranchControlTest extends FreeSpec with ChiselScalatestTester {\n\n  \"Branch Control Test\" in {\n\n    test(new BranchControl(UInt(32.W))) { c =>\n    \n        val array_funct3 = Array(0,1,4,6,5,7)\n        for ( i <- 0 until 100) {\n            \n            val a = Random.nextLong() & 0xFFFFFFFFL\n            val b = Random.nextLong() & 0xFFFFFFFFL\n            val branch = Random.nextBoolean()\n            val ff = Random.nextInt(6)\n            val funct3 = array_funct3(ff)\n            val result = funct3 match {\n\n                case 0 => if (a == b) 1 else 0\n                case 1 => if (a != b) 1 else 0\n                case 4 => if (a < b) 1 else 0\n                case 6 => if (a < b) 1 else 0\n                case 5 => if (a >= b) 1 else 0\n                case 7 => if (a >= b) 1 else 0\n                case _ => 0\n            }   \n\n        c.io.arg_x.poke(a.U)\n        c.io.arg_y.poke(b.U)\n        c.io.fnct3.poke(funct3.U)\n        c.io.branch.poke(branch.B)\n        c.clock.step(1)\n        if (branch) c.io.br_taken.expect(result.B)\n        else c.io.br_taken.expect(0.B)\n        \n      }\n    }\n  }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/test/scala/Datapath/ControlTest.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport org.scalatest._\nimport chiseltest._\nimport chisel3._\n\nclass ControlTest extends FreeSpec with ChiselScalatestTester {\n\n    \"Control Test\" in {\n\n        test(new Control) {c =>\n        \n        c.io.opCode.poke(35.U)\n        c.io.MemWrite.expect(true.B)\n        c.io.Branch.expect(false.B)\n        c.io.MemRead.expect(false.B)\n        c.io.RegWrite.expect(false.B)\n        c.io.MemToReg.expect(false.B) //RegFile\n        c.io.AluOp.expect(\"b101\".U)\n        c.io.Operand_aSel.expect(\"b00\".U)\n        c.io.Operand_bSel.expect(true.B)\n        c.io.ExtendSel.expect(\"b10\".U)\n\t\tc.io.NextPcSel.expect(\"b00\".U)\n\n        }\n    }\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/test/scala/Datapath/ImmGenTest.scala","languageId":"scala","version":1,"text":"package Datapath\n\n\nimport org.scalatest._\nimport chiseltest._\nimport chisel3._\nimport scala.util._\n\nclass ImmGenTest extends FreeSpec with ChiselScalatestTester {\n\n  \"Immediate Generation Test\" in {\n\n    test(new ImmGen) { c =>\n\n    val inst_array = Array(\"h00200613\",\"h00300693\",\"h0000c637\")\n\n    for (i <- 0 until 100){\n\n        val inst = inst_array(Random.nextInt(3))\n        val result = inst match {\n\n            case (\"h00200613\") => 2\n            case (\"h00300693\") => 3\n            case (\"h0000c637\") => 12\n\n        }\n\n        c.io.instr.poke(inst.U)\n        c.io.pc.poke(4.U)\n        c.io.i_imm.expect(result.S)\n        c.io.u_imm.expect(result.S)\n        c.io.s_imm.expect(result.S)\n        c.io.uj_imm.expect(result.S)\n        c.io.sb_imm.expect(result.S)\n        \n      }\n    }\n  }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/test/scala/Datapath/ControlDecodeTest.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport org.scalatest._\nimport chiseltest._\nimport chisel3._\n\nclass ControlDecodeTest extends FreeSpec with ChiselScalatestTester{\n    \n    \"Control Decode Test\" in {\n\n        test(new ControlDecode) { c=>\n        \n        c.io.RType.poke(0.B)\n        c.io.IType.poke(0.B)\n        c.io.Lui .poke(0.B)\n        c.io.Jal.poke(1.B)\n        c.io.Jalr.poke(0.B)\n        c.io.Load.poke(0.B)\n        c.io.Store.poke(0.B)\n        c.io.SBType.poke(0.B)\n    \n        c.clock.step(20) \n\n        c.io.Branch.expect(0.B)\n        c.io.RegWrite.expect(1.B)\n        c.io.Operand_bSel.expect(0.B)\n        c.io.ExtendSel.expect(\"b0\".U)\n        c.io.MemRead.expect(0.B)\n        c.io.MemToReg.expect(0.B)\n        c.io.MemWrite.expect(0.B)\n        c.io.NextPcSel.expect(\"b10\".U)\n        c.io.AluOp.expect(\"b011\".U) \n        c.io.Operand_aSel.expect(\"b10\".U)\n\n        }\n    }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/test/scala/gcd/GCDSpec.scala","languageId":"scala","version":1,"text":"// See README.md for license details.\n\npackage gcd\n\nimport chisel3._\nimport chisel3.tester._\nimport org.scalatest.FreeSpec\nimport chisel3.experimental.BundleLiterals._\n\n/**\n  * This is a trivial example of how to run this Specification\n  * From within sbt use:\n  * {{{\n  * testOnly gcd.GcdDecoupledTester\n  * }}}\n  * From a terminal shell use:\n  * {{{\n  * sbt 'testOnly gcd.GcdDecoupledTester'\n  * }}}\n  */\nclass GCDSpec extends FreeSpec with ChiselScalatestTester {\n\n  \"Gcd should calculate proper greatest common denominator\" in {\n    test(new DecoupledGcd(16)) { dut =>\n      dut.input.initSource()\n      dut.input.setSourceClock(dut.clock)\n      dut.output.initSink()\n      dut.output.setSinkClock(dut.clock)\n\n      val testValues = for { x <- 0 to 10; y <- 0 to 10} yield (x, y)\n      val inputSeq = testValues.map { case (x, y) => (new GcdInputBundle(16)).Lit(_.value1 -> x.U, _.value2 -> y.U) }\n      val resultSeq = testValues.map { case (x, y) =>\n        (new GcdOutputBundle(16)).Lit(_.value1 -> x.U, _.value2 -> y.U, _.gcd -> BigInt(x).gcd(BigInt(y)).U)\n      }\n\n      fork {\n        // push inputs into the calculator, stall for 11 cycles one third of the way\n        val (seq1, seq2) = inputSeq.splitAt(resultSeq.length / 3)\n        dut.input.enqueueSeq(seq1)\n        dut.clock.step(11)\n        dut.input.enqueueSeq(seq2)\n      }.fork {\n        // retrieve computations from the calculator, stall for 10 cycles one half of the way\n        val (seq1, seq2) = resultSeq.splitAt(resultSeq.length / 2)\n        dut.output.expectDequeueSeq(seq1)\n        dut.clock.step(10)\n        dut.output.expectDequeueSeq(seq2)\n      }.join()\n\n    }\n  }\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/main/scala/Datapath/DataMemory.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport chisel3._\nimport chisel3.util._\n\n\n\nclass DataMemIO(address: UInt, data:SInt) extends Bundle{\n\n    val data_in = Input(data)\n    val data_out = Output(data)\n    val addr = Input(address)\n    val wr_en = Input(Bool())\n    val rd_en = Input(Bool())\n}\n\nclass DataMem extends Module with Config{\n    \n    val io = IO(new DataMemIO(addrType, dataType))\n\n    // Make memory of 32 x 32\n\n    val memory = Mem(1024, dataType)\n\n\n    io.data_out := 0.S\n\n    when (io.wr_en) {\n\n        memory.write(io.addr, io.data_in)\n\n    } \n    \n    when (io.rd_en) {\n        io.data_out := memory.read(io.addr)\n    }\n\n    .otherwise {\n        io.data_out := DontCare\n    }\n}\n\n\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/main/scala/Datapath/BranchControl.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport chisel3._\nimport chisel3.util._\n\nclass Branch_Control_IO[T <: Data]( width : T ) extends Bundle {\n\n    val fnct3 = Input(UInt(3.W))\n    val branch = Input(Bool())\n    val arg_x = Input(width)\n    val arg_y = Input(width)\n    val br_taken = Output(Bool()) //bNew\n}\n\nclass BranchControl(size:UInt) extends Module {\n\n    val io = IO (new Branch_Control_IO(size))\n    io.br_taken := 0.B\n    \n    when (io.branch === 1.B) {\n        \n        when ((io.arg_x === io.arg_y) && io.fnct3 === \"b000\".U) {\n            io.br_taken := 1.B\n        }\n\n        .elsewhen ((io.arg_x =/= io.arg_y) && io.fnct3 === \"b001\".U) {\n            io.br_taken := 1.B\n        }\n\n        .elsewhen ((io.arg_x < io.arg_y) && (io.fnct3 === \"b100\".U | io.fnct3 === \"b110\".U)) {\n            io.br_taken := 1.B\n        }\n\n        .elsewhen ((io.arg_x >= io.arg_y) && (io.fnct3 === \"b101\".U | io.fnct3 === \"b111\".U)) {\n            io.br_taken := 1.B\n        }\n\n        .otherwise{\n            io.br_taken := 0.B\n        }\n    }\n    \n    .otherwise{\n        io.br_taken := 0.B\n    }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/main/scala/Datapath/Control.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport chisel3._\n\nclass ControlIO extends Bundle{\n\n\tval opCode = Input(UInt(7.W))\n\tval MemWrite = Output(Bool())\n\tval Branch = Output(Bool())\n\tval MemRead = Output(Bool())\n\tval RegWrite = Output(Bool())\n\tval MemToReg = Output(Bool())\n\tval AluOp = Output(UInt(3.W))\n\tval Operand_aSel = Output(UInt(2.W))\n\tval Operand_bSel = Output(Bool())\n\tval ExtendSel = Output(UInt(2.W))\n\tval NextPcSel = Output(UInt(2.W))\n}\n\nclass Control extends Module{\n\n\tval io = IO(new ControlIO)\n\n\tval typeDec = Module(new TypeDecode)\n\tval controlDec = Module(new ControlDecode)\n\t\n\ttypeDec.io.opCode := io.opCode\n\t\n\tSeq(controlDec.io.RType,controlDec.io.Load,controlDec.io.Store,controlDec.io.SBType,\n\t\tcontrolDec.io.IType,controlDec.io.Jalr,controlDec.io.Jal,controlDec.io.Lui) zip \n\t\tSeq(typeDec.io.RType,typeDec.io.Load,typeDec.io.Store,typeDec.io.Branch,\n\t\ttypeDec.io.IType,typeDec.io.Jalr,typeDec.io.Jal,typeDec.io.Lui) map{ x => x._1 := x._2}\n\t\n\tSeq(io.MemWrite,io.Branch,io.MemRead,io.RegWrite,io.MemToReg,io.AluOp,io.Operand_aSel,\n\t\tio.Operand_bSel,io.ExtendSel,io.NextPcSel) zip Seq(controlDec.io.MemWrite,\n\t\tcontrolDec.io.Branch, controlDec.io.MemRead, controlDec.io.RegWrite,controlDec.io.MemToReg,\n\t\tcontrolDec.io.AluOp, controlDec.io.Operand_aSel,controlDec.io.Operand_bSel,\n\t\tcontrolDec.io.ExtendSel, controlDec.io.NextPcSel) map{x => x._1 := x._2}\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/main/scala/Datapath/RegisterFile.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport chisel3._\n\nclass RegFileIO(addressWidth:UInt, dataWidth:SInt) extends Bundle{\n\n    val raddr1 = Input(addressWidth) // rs1sel\n    val raddr2 = Input(addressWidth) //rs2sel\n    val rdata1 = Output(dataWidth)  // rs1\n    val rdata2 = Output(dataWidth) // rs2\n    \n    val regEn = Input(Bool())         \n    val waddr = Input(addressWidth) // rdsel\n    val wdata = Input(dataWidth) // rd\n\n}\n\n// trait CONFIG {\n//     val REGFILE_LEN = 32\n//     val XLEN = 32\n\n// }\n\nclass RegFile extends Module with Config {\n    \n    val io = IO(new RegFileIO(address,data))\n    val regs = Reg(Vec(REGFILE_LEN, SInt(XLEN.W)))\n    regs(0) := 0.S\n    io.rdata1 := Mux((io.raddr1.orR), regs(io.raddr1), 0.S)\n    io.rdata2 := Mux((io.raddr2.orR), regs(io.raddr2), 0.S)\n\n    when (io.regEn & io.waddr.orR) {\n        \n        regs (io.waddr) := io.wdata\n    \n    }\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/main/scala/Datapath/ControlDecode.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport chisel3._\n\n\nclass ControlDecodeIO extends Bundle{\n\n    val RType = Input( Bool())\n\tval Load = Input( Bool())\n\tval Store = Input( Bool())\n\tval SBType = Input( Bool())\n\tval IType = Input( Bool())\n\tval Jalr = Input( Bool())\n\tval Jal = Input( Bool())\n\tval Lui = Input( Bool())\n\tval MemWrite = Output( Bool())\n\tval Branch = Output( Bool())\n\tval MemRead = Output( Bool())\n\tval RegWrite = Output( Bool())\n\tval MemToReg = Output( Bool())\n\tval AluOp = Output(UInt(3.W))\n\tval Operand_aSel = Output(UInt(2.W))\n\tval Operand_bSel = Output( Bool())\n\tval ExtendSel = Output(UInt(2.W))\n\tval NextPcSel = Output(UInt(2.W))\n\n}\n\n\nclass ControlDecode extends Module{\n\n\tval io = IO(new ControlDecodeIO)\n\t\t\n\tio.MemWrite := 0.B\n\tio.Branch := 0.B\n\tio.MemRead := 0.B\n\tio.RegWrite := 0.B\n\tio.MemToReg := 0.B\n\tio.AluOp := \"b000\".U\n\tio.Operand_aSel := \"b00\".U\n\tio.Operand_bSel := 0.B\n\tio.ExtendSel := \"b00\".U\n\tio.NextPcSel := \"b00\".U\n\n\twhen(io.RType === 1.B){\n\t\tio.RegWrite := 1.B\n\t}\n        \n    .elsewhen(io.Load === 1.B){\n\t\tio.MemRead := 1.B\n\t\tio.RegWrite := 1.B\n\t\tio.MemToReg := 1.B\n\t\tio.AluOp := \"b100\".U\n\t\tio.Operand_bSel := 1.B\n\t}\n    \n    .elsewhen(io.Store === 1.B){\n\t\tio.MemWrite := 1.B\n\t\tio.AluOp := \"b101\".U\n\t\tio.Operand_bSel := 1.B\n\t\tio.ExtendSel := \"b10\".U\n\t}\n    \n    .elsewhen(io.SBType === 1.B){\n\t\tio.Branch := 1.B\n\t\tio.AluOp := \"b010\".U\n\t\tio.NextPcSel:= \"b01\".U\n\t}\n    \n    .elsewhen(io.IType === 1.B){\n\t\tio.RegWrite := 1.B\n\t\tio.AluOp := \"b001\".U\n\t\tio.Operand_bSel := 1.B\t\t\n\t}\n    \n    .elsewhen(io.Jalr === 1.B){\n\t\tio.RegWrite := 1.B\n\t\tio.AluOp := \"b011\".U\n\t\tio.Operand_aSel := \"b10\".U\n\t\tio.NextPcSel := \"b11\".U\n\t}\n    \n    .elsewhen(io.Jal === 1.B){\n\t\tio.RegWrite := 1.B\n\t\tio.AluOp := \"b011\".U\n\t\tio.Operand_aSel := \"b10\".U\n\t\tio.NextPcSel := \"b10\".U\n\t}\n    \n    .elsewhen(io.Lui === 1.B){\n\t\tio.RegWrite := 1.B\n\t\tio.AluOp := \"b110\".U\n\t\tio.Operand_aSel := \"b11\".U\n\t\tio.Operand_bSel := 1.B\n\t\tio.ExtendSel := \"b01\".U\n\t}\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/main/scala/Datapath/Alu.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport chisel3._\nimport chisel3.util._\n\nclass AluIO(in_out_Width:Int,AluCtrl:Int) extends Bundle{\n\n    val AluControl = Input(UInt(AluCtrl.W))\n\tval in1 = Input(SInt(in_out_Width.W))\n\tval in2 = Input(SInt(in_out_Width.W))\n\tval Branch = Output(Bool())\n\tval out = Output(SInt(in_out_Width.W))\n}\n\nclass Alu extends Module with Config {\n\n    val io = IO(new AluIO(WLEN,AluCtrl))\n\n\t//Add Addi\n\twhen (io.AluControl === \"b00000\".U){io.out := io.in1 + io.in2}\n\t//Sll Slli Sra Srai\n\t.elsewhen (io.AluControl === \"b00001\".U){io.out := io.in1 << io.in2(4,0)}\n\t//Xor Xori\n\t.elsewhen (io.AluControl === \"b00100\".U){io.out := io.in1 ^ io.in2}\n\t//Srl Srli\n\t.elsewhen (io.AluControl === \"b00101\".U || io.AluControl === \"b01101\".U){io.out := io.in1 >> io.in2(4,0)}\n\t//Or Ori\n\t.elsewhen (io.AluControl === \"b00110\".U){io.out := io.in1 | io.in2}\n\t//And Andi\n\t.elsewhen (io.AluControl === \"b00111\".U){io.out := io.in1 & io.in2}\n\t//Sub\n\t.elsewhen (io.AluControl === \"b01000\".U){io.out := io.in1 - io.in2}\n\t//Jal Jalr\n\t.elsewhen (io.AluControl === \"b11111\".U){io.out := io.in1}\n\t//Bge\n\t.elsewhen (io.AluControl === \"b10101\".U){\n\t\twhen (io.in1 >= io.in2){io.out := 1.S}\n\t\t.otherwise {io.out := 0.S}}\n\t//Bgeu\n\t.elsewhen (io.AluControl === \"b10111\".U){\n\t\twhen (io.in1.asUInt >= io.in2.asUInt){io.out := 1.S}\n\t\t.otherwise {io.out := 0.S}}\n\t//Sltu Sltui Bltu\n\t.elsewhen (io.AluControl === \"b00011\".U || io.AluControl === \"b10110\".U){\n\t\twhen (io.in1.asUInt < io.in2.asUInt){io.out := 1.S}\n\t\t.otherwise {io.out := 0.S}}\n\t//Beq\n\t.elsewhen (io.AluControl === \"b10000\".U){\n\t\twhen (io.in1 === io.in2){io.out := 1.S}\n\t\t.otherwise {io.out := 0.S}}\n\t//Slt Slti Blt\n\t.elsewhen (io.AluControl === \"b00010\".U || io.AluControl === \"b10100\".U){\n\t\twhen (io.in1 < io.in2){io.out := 1.S}\n\t\t.otherwise {io.out := 0.S}}\n\t//Bne\n\t.elsewhen (io.AluControl === \"b10001\".U){\n\t\twhen (io.in1 =/= io.in2){io.out := 1.S}\n\t\t.otherwise {io.out := 0.S}}\n\t.otherwise {io.out := DontCare}\n\n\t//Branch\n\n\twhen (io.out === 1.S && io.AluControl(4,3) === \"b10\".U){\n\t\tio.Branch := true.B\n\t}\n\n\t.otherwise {\n\t\tio.Branch := false.B\n\t}\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/main/scala/Datapath/TopFile.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport chisel3._\nimport chisel3.util._\n\nclass TopIO extends Bundle{\n    val RegOut = Output(SInt(32.W))\n}\n\nclass TopFile extends Module {\n    \n    val io = IO (new TopIO) \n\t\n\tval alu = Module(new Alu)\n    val aluControl = Module(new AluControl)\n\tval control = Module(new Control)\n\tval dataMemory = Module(new DataMem)\n\tval ImmediateGeneration = Module(new ImmGen)\n\tval Memory = Module(new InstructionMemory)\n\tval jalr = Module(new Jalr)\n\tval pc = Module(new PC)\n\tval registerFile = Module(new RegFile)\n\n    // Instruction memory connections\n\n\tMemory.io.addr := pc.io.pc(11,2)\n\tpc.io.in := pc.io.pcPlus4\n\n    //  Imm Gen\n\n    control.io.opCode := Memory.io.inst(6,0)\n\tImmediateGeneration.io.instr := Memory.io.inst\n\tImmediateGeneration.io.pc := pc.io.pc\n\n    // Reg File\n\n    registerFile.io.regEn := control.io.RegWrite\n\tregisterFile.io.raddr1 := Memory.io.inst(19,15)\n\tregisterFile.io.raddr2 := Memory.io.inst(24,20)\n\tregisterFile.io.waddr := Memory.io.inst(11,7)\n\n    // alu op\n\n    aluControl.io.Aluop := control.io.AluOp\n\taluControl.io.func3 := Memory.io.inst(14,12)\n\taluControl.io.func7 := Memory.io.inst(30)\n\n    // Jalr \n\n    jalr.io.rs1 := registerFile.io.rdata1\n    jalr.io.Type := ImmediateGeneration.io.i_imm\n\n    when (control.io.ExtendSel === \"b00\".U && control.io.Operand_bSel === \"b1\".U){\n        alu.io.in2 := ImmediateGeneration.io.i_imm\n    }\n\n\t.elsewhen (control.io.ExtendSel === \"b01\".U && control.io.Operand_bSel === \"b1\".U){\n        alu.io.in2 := ImmediateGeneration.io.u_imm\n    }\n\n\t.elsewhen (control.io.ExtendSel === \"b10\".U && control.io.Operand_bSel === \"b1\".U){\n\t\talu.io.in2 := ImmediateGeneration.io.s_imm}\n\n\t.otherwise {alu.io.in2 := registerFile.io.rdata2}\n\n\talu.io.AluControl := aluControl.io.control\n\tregisterFile.io.wdata := alu.io.out\n\tio.RegOut := registerFile.io.wdata\n\n    pc.io.in := MuxCase(0.U, Array(\n\n        (control.io.NextPcSel === \"b01\".U && control.io.Branch === \"b0\".U && alu.io.Branch === \"b0\".U) -> pc.io.pcPlus4,\n        (control.io.NextPcSel === \"b01\".U && control.io.Branch === \"b1\".U && alu.io.Branch === \"b0\".U) -> pc.io.pcPlus4,\n\t    (control.io.NextPcSel === \"b01\".U && control.io.Branch === \"b0\".U && alu.io.Branch === \"b1\".U) -> pc.io.pcPlus4,\n\t    (control.io.NextPcSel === \"b01\".U && control.io.Branch === \"b1\".U && alu.io.Branch === \"b1\".U) -> ImmediateGeneration.io.sb_imm.asUInt,\n        (control.io.NextPcSel === \"b00\".U) -> pc.io.pcPlus4,\n        (control.io.NextPcSel === \"b10\".U) -> ImmediateGeneration.io.uj_imm.asUInt,\n        (control.io.NextPcSel === \"b11\".U) -> jalr.io.out.asUInt,\n        // (control.io.NextPcSel === \"b??\".U && control.io.Branch === \"b?\".U && alu.io.Branch === \"b?\".U) -> DontCare\n    \n    ))\n\n    // Data Mem\n\n    dataMemory.io.addr := (alu.io.out(9,2)).asUInt\n\tdataMemory.io.data_in := registerFile.io.rdata2\n\tdataMemory.io.wr_en := control.io.MemWrite\n\tdataMemory.io.rd_en := control.io.MemRead \n\n    when (control.io.MemToReg === 1.U) {\n        registerFile.io.wdata := dataMemory.io.data_out\n    }\n\n\t.otherwise {\n        registerFile.io.wdata := alu.io.out\n    }\n\n\twhen (control.io.Operand_aSel === \"b00\".U || control.io.Operand_aSel === \"b11\".U) {\n        alu.io.in1 := registerFile.io.rdata1\n    }\n\n\t.elsewhen (control.io.Operand_aSel === \"b10\".U) {\n        alu.io.in1 := pc.io.pcPlus4.asSInt\n    }\n\n\t.otherwise {alu.io.in1 := DontCare}\n\n\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/main/scala/Datapath/TypeDecode.scala","languageId":"scala","version":1,"text":"\npackage Datapath\n\nimport chisel3._\n\nclass TypeDecodeIO(opcode:UInt) extends Bundle{\n\n\tval opCode = Input(opcode)\n\tval RType = Output(Bool())\n\tval Load = Output(Bool())\n\tval Store = Output(Bool())\n\tval Branch = Output(Bool())\n\tval IType = Output(Bool())\n\tval Jalr = Output(Bool())\n\tval Jal = Output(Bool())\n\tval Lui = Output(Bool())\n}\n\nclass TypeDecode extends Module with Config {\n\t\n\tval  io = IO(new TypeDecodeIO(opCodeWidth))\n\t\n\tio.RType := 0.U\n\tio.Load := 0.U\n\tio.Store := 0.U\n\tio.Branch := 0.U\n\tio.IType := 0.U\n\tio.Jalr := 0.U\n\tio.Jal := 0.U\n\tio.Lui := 0.U\n\n\twhen(io.opCode === \"b0110011\".U){\n\t\tio.RType := 1.U\t\n\t}\n\t\n\t.elsewhen(io.opCode === \"b0000011\".U){\n\t\tio.Load := 1.U\n\t}\n\t\n\t.elsewhen(io.opCode === \"b0100011\".U){\n\t\tio.Store := 1.U\n\t}\n\t\n\t.elsewhen(io.opCode === \"b1100011\".U){\n\t\tio.Branch := 1.U\n\t}\n\t\n\t.elsewhen(io.opCode === \"b0010011\".U){\n\t\tio.IType := 1.U\n\t}\n\t\n\t.elsewhen(io.opCode === \"b1100111\".U){\n\t\tio.Jalr := 1.U\n\t}\n\t\n\t.elsewhen(io.opCode === \"b1101111\".U){\n\t\tio.Jal := 1.U\n\t}\n\t\n\t.elsewhen(io.opCode === \"b0110111\".U){\n\t\tio.Lui := 1.U\n\t}\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/main/scala/Datapath/AluControl.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport chisel3._\nimport chisel3.util._\n\nclass Alu_Control_IO(width: Int, f3: UInt) extends Bundle {\n\n\tval Aluop = Input(UInt(width.W))\n\tval func7 = Input(Bool())\n\tval func3 = Input(f3)\n\tval control = Output(UInt(5.W))\n\n}\n\nclass AluControl extends Module with Config{\n\n\tval io = IO(new Alu_Control_IO(aluopWidth, func3))\n\n\tio.control := MuxCase(\"b000\".U, Array(\n\n\t\t// R Type \n\n\t\t(io.Aluop === \"b000\".U && io.func7 === false.B) -> Cat(\"b0\".U, io.func3),\n\t\t(io.Aluop === \"b000\".U && io.func7 === true.B) -> Cat(\"b1\".U, io.func3),\n\n\t\t// Srli\n\n\t\t(io.Aluop === \"b001\".U && io.func3 === \"b101\".U && io.func7 === false.B) -> Cat(\"b0\".U , io.func3),\n\n\t\t//Srai\n\n\t\t(io.Aluop === \"b001\".U && io.func3 === \"b101\".U && io.func7 === true.B) -> Cat(\"b1\".U , io.func3),\n\n\t\t//SLLI\n\n\t\t(io.Aluop === \"b001\".U && io.func3 === \"b001\".U) -> Cat(\"b0\".U , io.func3),\n\n\t\t//All Remaining I-Type\n\n\t\t(io.Aluop === \"b001\".U) -> Cat(\"b0\".U , io.func3),\n\n\t\t// Branch\n\n\t\t(io.Aluop === \"b010\".U) -> Cat(\"b010\".U , io.func3),\n\n\t\t//JALR , JAL\n\n\t\t(io.Aluop === \"b011\".U) -> \"b11111\".U  \n\n\t\t))\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/main/scala/Datapath/ImmGen.scala","languageId":"scala","version":1,"text":"package Datapath\n\nimport chisel3._\nimport chisel3.util._\n\nclass ImmGenIO(inType:UInt, outType:SInt) extends Bundle{\n\n\tval instr = Input(inType)\n\tval pc = Input(inType)\n\tval s_imm = Output(outType)\n\tval sb_imm = Output(outType)\n\tval uj_imm = Output(outType)\n\tval u_imm = Output(outType)\n\tval i_imm = Output(outType)\n\n}\n\nclass ImmGen extends Module with Config {\n\n \tval io = IO (new ImmGenIO(immInType, immOutType))\n\n\t//S\n\tval s_imm13 = Cat (io.instr(31,25),io.instr(11,7))\n\tio.s_imm := (Cat(Fill(20,s_imm13(11)),s_imm13)).asSInt\n\n\t//SB\n\tval sb_imm13 = Cat (io.instr(31),io.instr(7),io.instr(30,25),io.instr(11,8),\"b0\".U)\n\tio.sb_imm := ((Cat(Fill(19,sb_imm13(12)),sb_imm13)) + io.pc).asSInt\n\n\t//UJ\n\tval uj_imm21 = Cat (io.instr(31),io.instr(19,12),io.instr(20),io.instr(30,21),\"b0\".U)\n\tio.uj_imm := ((Cat(Fill(12,uj_imm21(20)),uj_imm21)) + io.pc).asSInt\n\n\t//U\n\tio.u_imm := ((Cat(Fill(12,io.instr(31)),io.instr(31,12))) << 12).asSInt\n\t\n\t//I\n\tio.i_imm := (Cat(Fill(20,io.instr(31)),io.instr(31,20))).asSInt\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/main/scala/gcd/DecoupledGCD.scala","languageId":"scala","version":1,"text":"// See README.md for license details.\n\npackage gcd\n\nimport chisel3._\nimport chisel3.util.Decoupled\n\nclass GcdInputBundle(val w: Int) extends Bundle {\n  val value1 = UInt(w.W)\n  val value2 = UInt(w.W)\n}\n\nclass GcdOutputBundle(val w: Int) extends Bundle {\n  val value1 = UInt(w.W)\n  val value2 = UInt(w.W)\n  val gcd    = UInt(w.W)\n}\n\n/**\n  * Compute Gcd using subtraction method.\n  * Subtracts the smaller from the larger until register y is zero.\n  * value input register x is then the Gcd.\n  * Unless first input is zero then the Gcd is y.\n  * Can handle stalls on the producer or consumer side\n  */\nclass DecoupledGcd(width: Int) extends MultiIOModule {\n  val input = IO(Flipped(Decoupled(new GcdInputBundle(width))))\n  val output = IO(Decoupled(new GcdOutputBundle(width)))\n\n  val xInitial    = Reg(UInt())\n  val yInitial    = Reg(UInt())\n  val x           = Reg(UInt())\n  val y           = Reg(UInt())\n  val busy        = RegInit(false.B)\n  val resultValid = RegInit(false.B)\n\n  input.ready := ! busy\n  output.valid := resultValid\n  output.bits := DontCare\n\n  when(busy)  {\n    when(x > y) {\n      x := x - y\n    }.otherwise {\n      y := y - x\n    }\n    when(x === 0.U || y === 0.U) {\n      when(x === 0.U) {\n        output.bits.gcd := y\n      }.otherwise {\n        output.bits.gcd := x\n      }\n\n      output.bits.value1 := xInitial\n      output.bits.value2 := yInitial\n      resultValid := true.B\n\n      when(output.ready && resultValid) {\n        busy := false.B\n        resultValid := false.B\n      }\n    }\n  }.otherwise {\n    when(input.valid) {\n      val bundle = input.deq()\n      x := bundle.value1\n      y := bundle.value2\n      xInitial := bundle.value1\n      yInitial := bundle.value2\n      busy := true.B\n    }\n  }\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///home/theengineerguyy/Desktop/Aghaas-Core/src/main/scala/gcd/GCD.scala","languageId":"scala","version":1,"text":"// See README.md for license details.\n\npackage gcd\n\nimport chisel3._\n\n/**\n  * Compute GCD using subtraction method.\n  * Subtracts the smaller from the larger until register y is zero.\n  * value in register x is then the GCD\n  */\nclass GCD extends Module {\n  val io = IO(new Bundle {\n    val value1        = Input(UInt(16.W))\n    val value2        = Input(UInt(16.W))\n    val loadingValues = Input(Bool())\n    val outputGCD     = Output(UInt(16.W))\n    val outputValid   = Output(Bool())\n  })\n\n  val x  = Reg(UInt())\n  val y  = Reg(UInt())\n\n  when(x > y) { x := x - y }\n    .otherwise { y := y - x }\n\n  when(io.loadingValues) {\n    x := io.value1\n    y := io.value2\n  }\n\n  io.outputGCD := x\n  io.outputValid := y === 0.U\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (/home/theengineerguyy/Desktop/Aghaas-Core/target/scala-2.12/zinc/inc_compile_2.12.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Oct 12, 2021, 4:48:47 PM[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":4,"message":"Done"})[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, ♨1, shutdown, null})[0m
